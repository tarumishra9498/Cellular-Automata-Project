/*
Created by Taru Mishra, tm36775, Unique Number: 15395
BME303_Lab2_P4_TaruMishra.cpp
Date: 09-19-22
Problem : This Program will estimate the PI value using the Monte Carlo Method with the percent error from the original PI
It will calculate the total elipse area as well
*/

//LIBRARIES/NAMESPACE
    #include <iostream> //Indicates that the header library should be included
    #include <cstdlib> //Library allows for the generation of random numbers
    #include <cmath> //Cmath allows for the usage of mathematical operators like Pow
    #include <ctime> //Library used for srand calculation
    #include <iomanip> //Library allows for the usage of setprecision operator for a fixed output
    using namespace std; //Tells the program to use standard namespace

int main() { //Int main holds the main function that performs the commands
//USER INPUT: Number of Points
    cout << "Hello! This code will be calculating the value of PI based on the number of points generated with error, and find ellipse area" << endl;
    //COUT outputs introduction of what the program will be doing
    cout << "Please enter the total number of random points 'n' in the simulation: " << endl; //COUT outputs for the user to enter the total number of points n they want to use
    int numMax; //initializes the maximum number of points 'n' taken by user
    cin >> numMax; //Stores user input using CIN operator in numMax varaible
    if (cin.fail()){ //Cin.fail operator tests to see if there was an invalid input from the user, this will execute while cin.fail is true.
        cout << "Sorry, there was an error due to an invalid input. Please enter an integer number of points";
        //Ouputs that there was an error in the input and that the user should enter a valid integer number of points
        return 1; //Return 1 will exit the main function and stop the code because the input is not correct.
    } //Closing brackets end the if condition.

//Initializes Variables
    srand(time(0)); //Applies the current time as a starting point and returns random value between 0 and RAND_MAX
    int num = 0; //Sets the initial integer type variable num to be 0. Used later in while loop to run points generated certain number of times
    double pi = 3.14159265; //Calls double variable set to the actual value of pi
    double a = 10; //Sets the double variable 'a' equal to 10 for the area calculation
    double b = 7; //Sets the double varaible 'a' equal to 7 for the area calculation
    double x; //Initialized the double value of x
    //x will serve as the x-coordinate of the random point
    double y; //Initializes the double value of y
    //y will serve as the y-coordinate of the random point
    int hits = 0; //sets the integer number of hits (number of actual points in circle) initially to zero

//HITS CALCULATION
   //While loops runs a set of tasks given that an initial condition is true and runs
    while(num < numMax){  //While loop checks to see if the num value at zero is below the maximum number of points we want o generate
        x = double(rand()/double(RAND_MAX)); //a random point of x is generated by dividing a random double by the maximum Rand-Max value
        y = double(rand()/double(RAND_MAX)); //a random point of y is generated by dividing a random double by the maximum Rand-Max value
        //Single-line if statement carries out a task that while x^2 + y^2 <= 1. This is the equation of a circle, so if this condition is true,
        //it means that the points generated fall inside of the cirlce.
        if (pow(x,2) + pow(y,2) <= 1) { hits++; }  // While points are in the cirlce, a variable hits will be incremented by 1 each tiem
        num++;//One each hits is calculated the num variable increases by 1 until the task is performed the desired amount of times so that the while loop is not infinite
   } //Closing braces end the while loop

//CALCULATION FOR PI, AREA, ERROR
    double pi_estimate = 4.0 * hits / numMax; //Doubel pi_estimate initialized that multiplies the hits by 4 to find the estimate of pi
    //This is because the pi that is calculates is only for 1/4 of the area of the circle, so the actual pi must by grown by 4 and divided by the numMax times it was calculated

    double EllipseArea = pi_estimate * a*b; //initializes the Ellipse Area variable and sets it to the equation of the pi found times a and b which are constant here

    double error = (pi_estimate - pi)/(pi*100); //initializes the double-type error variable which is equal to the estimated pi minus the actual pi
    //Pi is multiplied by 100 because the error is wanted as a percent

 //CALCULATION OUTPUT
    cout << "Estimate for pi: " << fixed << setprecision(10) <<pi_estimate << endl;//Outputs the estimated pi value using the COUT operator

    cout << "The error is: " << fixed << setprecision(5) <<error << "%" << endl; //COUT operator outputs the error
    //Setprecision operator outputs the error percent to 5 decimal places

    cout << "The estimated ellipse area is: " << fixed << setprecision(5) << EllipseArea<< endl; //COUT operator is used to output the total Ellipse Area
    //Setprecision operators outputs the area to 5 decimal places

    return 0; //Returns a status of 0 if the program has run successfully
}//Closing braces end int-main code

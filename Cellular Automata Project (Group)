#BME303 Final Code
#2D Model of Autoimmune cell proliferation

# Import libraries
import numpy as np
import timeit
import random
import time
import matplotlib.pyplot as plt
from matplotlib import colors
import imageio


#Class addCells carries all the functions responsible
class addCells:
    # Creates an innit class that holds the matrix variable values
    def __init__(self, mainMatrix):
        self.mainMatrix = mainMatrix

        # X is the value of the row (global variable in class)
        # Y is the value of the column (global variable in class)

        # Coordinates for the normal autoimmune cell
        self.Ax = 0
        self.Ay = 0

        # Coordinates for the dividing autoimmune cell
        self.ADx = 0
        self.ADy = 0

        # Radius has a value of 1
        self.r = 1

        # probability variable for proliferation
        self.probability = 0
        # probability variable for autoimmune cell division
        self.probability2 = 0

        # Generates a random row and column value that the B blood cell will occupy
        self.Bx = 0
        self.By = 0

        # Generates coordinates for the T cell
        self.Tx = 0
        self.Ty = 0

        # Creates the names of the cell and the values which they will be represented based on if they are dividing or not
        self.EMPTYSPACE = 0 #empty space is 0
        self.TCELL = 1 #T cell is 1
        self.AUTOIMMUNE = 2 #Autoimmune cell is 2
        self.AUTOIMMUNEDIVIDING = 3 #Dividing auotimmune cell is 3
        self.BCELL = 4 #B Cell is 4

    def addCellSurroundingDividingCell(self):
        # i stores the value in the row
        # j stores the value in the column

        #for each of the 8 spaces surrounding the coordinates of the point of the dividing cell with a radius of 1

        #Adds empty spaces around the x-values
        for i in range((self.ADx - self.r), (self.ADx + self.r + 1)): #the point minus the radius of the x point, the point plus the radius of the x point
            for j in range((self.ADy - self.r), (self.ADy + self.r + 1)): #Adds the surrounding cell to the y points

                #If the point is already equal to the point of the dividing cell then it will pass that iteration
                if (i == self.ADx) and (j == self.ADy):  # If i holds the value of x or y then that iteration will be ignored
                    # because the value is the same as x and y that should hold the cancer cell
                    continue
                elif (i > 29) or (j > 29):  # If i or j is out of range (meaning more than 29), in the matrix then the
                    # function will pass that iteration, as it will not be executed
                    continue
                else: #the autoimmune cells can overtake the T Cells and the B Cells so the aboove conditions are the only conditions that they must meet
                    # if ALL of the above conditions are false, then for each row i j will add a value of 3
                    self.mainMatrix[i][j] = self.AUTOIMMUNEDIVIDING  # 3 means that the empty space is reserved for the dividing cell only

    #Function that adds an Autoimmune Dividing cell if the there is a 50% proabability is true
    def addAutoimmuneDividingCell(self):
        # generates a random value of x and y between 0 and 29: the limitations of the matrix
        self.ADx = random.randint(0, 29)
        self.ADy = random.randint(0, 29)

        # Adds a random autoimmune dividing cell to the matrix if the generated random values is an empty space
        if (self.mainMatrix[self.ADx][self.ADy] == self.EMPTYSPACE ):  # only if the value is empty space, then the cell will place a value of 0
            self.mainMatrix[self.ADx][self.ADy] = self.AUTOIMMUNEDIVIDING  # converts that value to 3, to represent autoimmune dividing cell

        # else if the value generated by random is not zero, it will call the random again until it does equal zero
        elif (self.mainMatrix[self.ADx][self.ADy] != self.EMPTYSPACE):
                 while (self.mainMatrix[self.ADx][self.ADy] != self.EMPTYSPACE):  # While the matrix value is not zero
                    # Keeps on generating random values for x and y
                    self.ADx = random.randint(0, 29)
                    self.ADy = random.randint(0, 29)

                    # If a randomly generated value for x and y finally is 0, then it will turn into an autoimmune cell
                    if (self.mainMatrix[self.ADx][self.ADy] == 0):
                        # sets the random value of x and y to be an autoimmune cell value, or 3
                        self.mainMatrix[self.ADx][self.ADy] = self.AUTOIMMUNEDIVIDING
                        break #breaks the code after adding the point so that it is not an infinite loop


    # Function is created that adds a T-Cell for each normal autoimmune cell (that is attacked by the immune system)
    def addTCell(self):
        # i stores the value in the row
        # j stores the value in the column

        #for loop stores the values of the autoimmune cell x and y positions and adds blue T Cells surrounding them
        for i in range((self.Ax - self.r), (self.Ax + self.r + 1)): #the point minus the radius of the x point, the point plus the radius of the x point
            for j in range((self.Ay - self.r), (self.Ay + self.r + 1)): #the point minus the radius of the y point, the point plus the radius of the y point
                # The value of 2 will represent a T cell
                if (i == self.Ax) and (j == self.Ay):  # If i holds the value of x or y then that iteration will be ignored
                    # because the value is the same as x and y, we ignore this iteration because we are only worrying about the cells surrounding it
                    continue
                elif (i > 29) or (j > 29):  # If i or j is out of range (meaning more than 29), then the
                    # function will pass that iteration as it will not be executed
                    continue
                elif (self.mainMatrix[i][j] == 3): #If the function is occupied by the autotimmune dividing cell, then the T cell will not be placed there
                    continue
                else:
                    # if ALL of the above conditions are false, then for each row i, j will add a value of 1, meaning that there is T cell there
                    self.mainMatrix[i][j] = self.TCELL  # 1 means that a T cell is there

    # Function is created that adds an autoimmune cell to the matrix
    def addAutoimmuneCell(self):
        # else: #if the probability is not in the autoimmune cell's favor, then it will place a normal autoreactive cell
        # generates a random value of x and y between 0 and 29
        self.Ax = random.randint(0, 29)
        self.Ay = random.randint(0, 29)

        # only if the value is empty space, then the cell will place a value of 0
        if (self.mainMatrix[self.Ax,self.Ay] == 0):
            self.mainMatrix[self.Ax,self.Ay] = self.AUTOIMMUNE  # converts that value to 3
        elif (self.mainMatrix[self.Ax,self.Ay] != 0):  # else if the value generated by random is not zero, it will call the random again until it does equal zero
            while (self.mainMatrix[self.Ax,self.Ay] != self.EMPTYSPACE):  # While the matrix value is not zero
                # Keeps on generating random values for x and y
                self.Ax = random.randint(0, 29)
                self.Ay = random.randint(0, 29)

                # If a randomly generated value for x and y finally is 0, then it will turn into an autoimmune cell
                if (self.mainMatrix[self.Ax,self.Ay] == 0):
                    # sets the random value of x and y that is an empty space to be an autoimmune cell value, or 2
                    self.mainMatrix[self.Ax][self.Ay] = self.AUTOIMMUNE
                    break  #breaks the code to stop an infinite loop

    #Function that represents the tissue generating B Cells at random
    def addBCells(self):
        # generates a random value of x and y between 0 and 30:
        self.Bx = random.randint(0, 29) #Bx and By are the function coordinates for the B cells
        self.By = random.randint(0, 29)

        #If statement checks to see if there is an empty space
        if (self.mainMatrix[self.Bx][self.By] == self.EMPTYSPACE ):  # only if the value is empty space, then the cell will place a value of 0
            self.mainMatrix[self.Bx][self.By] = self.BCELL # converts that value to 4

        # else if the value generated by random is not zero, it will call the random again until it does equal zero
        elif (self.mainMatrix[self.Bx][self.By] != self.EMPTYSPACE):

                 while (self.mainMatrix[self.Bx][self.By] != self.EMPTYSPACE):  # While the matrix value is not zero
                    # Keeps on generating random values for x and y
                    self.Bx = random.randint(0, 29)
                    self.By = random.randint(0, 29)

                    # If a randomly generated value for x and y finally is 0, then it will turn into an b cell
                    if (self.mainMatrix[self.Bx,self.By] == 0):
                        # sets the random value of x and y to be a b cell value, or 4
                        self.mainMatrix[self.Bx,self.By] = self.AUTOIMMUNEDIVIDING
                        break #once that value is generated the code breaks to prevent an infinite loop
newList = [] #new list is a global variable that stores all of the images and it will be convered into a video with the multiple values
#Function that plots the matrix for a given time value and changes that particular matrix
def plotFigure(Matrix,k):

    myString = "Cell_Division_At_Time" + str(k) + ".jpg" #Creates a string that holds the file name, for each time value
    #just a reminder that these are the values that reprsent the different cells.
    """
        self.EMPTYSPACE = 0 --> White
        self.TCELL = 1 --> Purple
        self.AUTOIMMUNE = 2 --> Orange
        self.AUTOIMMUNEDIVIDING = 3 --> Orange
        self.BCELL = 4 --> Black
    """
    #Color list in increasing order to represent the number and color values
    cmap = colors.ListedColormap(['white', 'purple', 'orange','orange', 'black'])
    #Two oranges because both autoimmune dviding and autoimmune cell are orange

    plt.figure(figsize=(7, 6)) #generates a plot of the given size
    plt.pcolor(Matrix, cmap=cmap, edgecolors='k', linewidths=0.5, vmin=0, vmax=4) #the minimum and maximum value for the color is between 0 -4

    # Add the colorbar and define the label ticks
    cbar = plt.colorbar(label="", orientation="vertical", ticks=[0.5,1.25, 2.5,3.5])

    # Define the label values of the color bar
    cbar.ax.set_yticklabels(['empty', 'T-Cell', 'Autoimmune Cell','BCell'])

    plt.savefig(myString, bbox_inches='tight', pad_inches=0.02) #Saves the figure of the string name
    newList.append(imageio.v2.imread(myString)) #appends the figure into the new list global variable
    plt.show() #shows the plot
    plt.close() #closes the file

myMatrix = np.zeros(900).reshape(30, 30) #my matrix is the final matrix of blank value with alll 0s 30 X 30
proliferate = addCells(myMatrix)  #proliferate is an object that stores the class values

for i in range(10): #for loop iterates for the i amount of times to represent the passage of time over i days
    probabilityInt = random.randint(1, 2) #probabioit Int is the probabilty of what type of cell will be generate (autoimmune or B cell)
    if probabilityInt == 2: #There is a 50% chance that the cell will be autoimmune, so if that is true, an autimmune cell will be added
        probability2 = random.randint(1, 2) #A second probability integer is genearted to see if the autoimmune cell will divide or not
        if probability2 == 1: #if the proabability is 1, a 50% chance, then an autoimmune dividing cell will be placed
            print("The probability is ADC") #print statement generated for user checking the code
            proliferate.addAutoimmuneDividingCell() #adds an autoimmune dividing cell
            proliferate.addCellSurroundingDividingCell() #adds the dividing cell surrounding the autoimmune cell (same color)
        else: #else if the other 50% probability is true, the number is 2, then an autoimmune cell that has T cells surrounding it, it is attacked by the immune system
            print ("The probability is AC")  #print statement generated for user checking the code
            proliferate.addAutoimmuneCell() #Adds a normal autoimmune cell
            proliferate.addTCell() #Using those x and y values, adds a T cell surrounding the autoimmune cell
    else: #else if the other 50% probability is true, the number is 1, then a B cell will be added
        proliferate.addBCells() #Adds the B Cell to the matrix
    plotFigure(myMatrix, i) #for each time iteration, a 2D figure is plotted
print(myMatrix) #Prints the matrix to the terminal to allow for debugging and efficiency

print("done") #outputs when the for loop is completed
x = len(newList) #added for debugging, make sures the video outputs the corrent number of images
print(x)
imageio.mimwrite('video.gif', newList, duration = 10) #Creates a video gif that creates a video of the new list
